name: 'Deploy Lighthouse Developer Portal app'
description: 'Deploys Lighthouse Developer Portal application to an environment using helm'
inputs:
  KUBE_CONFIG:
    description: 'Kubernetes context'
    required: true
  DOCKERCONFIGJSON:
    description: 'Authentication for pulling from image registry'
    required: true
  BACKEND_SECRET:
    description: 'Randomly generated string for backend-to-backend authentication'
    required: true
  GH_CLIENT_ID:
    description: 'OAuth client ID'
    required: true
  GH_CLIENT_SECRET:
    description: 'OAuth client secret'
    required: true
  GH_TOKEN:
    description: 'Github Token'
    required: true
  ENV:
    description: 'Flag used to set environment variable overrides'
    required: true
  POSTGRES_USER:
    description: 'Username for postgres database'
    required: true
  POSTGRES_PASSWORD:
    description: 'Password for postgres database'
    required: true
  AWS_BUCKET_NAME:
    description: 'AWS bucket name'
    required: true
  SERVICE_ACCOUNT:
    description: 'Service account name'
    required: true
  DOCSERVER_BASE_URL:
    description: 'Docserver base url'
    required: true
  APP_CREDS_YAML:
    description: 'GitHub app secret credentials yaml file'
    required: true
  COMMIT_SHA:
    description: 'Commit SHA used to tag images - required for QA workflow'
    required: false
  VERSION:
    description: 'Current version of lighthouse developer portal'
    required: false
  MEMCACHED_USER:
    description: 'Memcached username'
    required: true
  MEMCACHED_PASSWORD:
    description: 'Memcached password'
    required: true

runs:
  using: "composite"
  steps:
  - name: Set K8s context
    uses: azure/k8s-set-context@v1
    with:
      method: kubeconfig
      kubeconfig: ${{ inputs.KUBE_CONFIG }}
  - name: Set env overrides
    id: overrides
    run: |
      echo "::set-output name=nonprod::true"
      if [[ "${{ inputs.ENV }}" == "sandbox" ]]; then
        echo "::set-output name=BASE_URL::http://internal-a553b74e4e49b45cc899c47d90fee0c4-2084915407.us-gov-west-1.elb.amazonaws.com"
        echo "::set-output name=HOST::internal-a553b74e4e49b45cc899c47d90fee0c4-2084915407.us-gov-west-1.elb.amazonaws.com"
        echo "::set-output name=GATEWAY::istio-system/ldx-nonprod-bandicoot-sandbox-backstage-gateway"
      fi
      if [[ "${{ inputs.ENV }}" == "dev" ]]; then
        echo "::set-output name=BASE_URL::http://internal-adf279c17510a463bb78ac88ffe2f7dd-667251419.us-gov-west-1.elb.amazonaws.com"
        echo "::set-output name=HOST::internal-adf279c17510a463bb78ac88ffe2f7dd-667251419.us-gov-west-1.elb.amazonaws.com"
        echo "::set-output name=GATEWAY::istio-system/ldx-nonprod-bandicoot-dev-backstage-gateway"
      fi
      if [[ "${{ inputs.ENV }}" == "qa" ]]; then
        echo "::set-output name=BASE_URL::http://internal-ac82ef17b50b144ff98d45d6fc6af502-971600415.us-gov-west-1.elb.amazonaws.com"
        echo "::set-output name=HOST::internal-ac82ef17b50b144ff98d45d6fc6af502-971600415.us-gov-west-1.elb.amazonaws.com"
        echo "::set-output name=GATEWAY::istio-system/ldx-nonprod-qa-gateway"
      fi
    shell: bash
  - name: Create image tag
    id: tag
    run: |
      prefix="sha-"
      if [[ "${{ inputs.COMMIT_SHA }}" ]]; then
        prefix+=${{ inputs.COMMIT_SHA }}
      else
        prefix+=${{ github.sha }}
      fi
      echo "::set-output name=sha::$prefix"
    shell: bash
  - name: Upgrade(or install) helm release
    id: upgrade
    run: >
      helm upgrade lighthouse-developer-portal-${{ inputs.ENV }} helm/lighthouse-developer-portal/
      --debug
      --values helm/lighthouse-developer-portal/values.yaml
      --namespace lighthouse-bandicoot-dev
      --set DOCKERCONFIGJSON=${{ inputs.DOCKERCONFIGJSON }}
      --set BACKEND_SECRET=${{ inputs.BACKEND_SECRET }}
      --set HOST=${{ steps.overrides.outputs.HOST }}
      --set GATEWAY=${{ steps.overrides.outputs.GATEWAY }}
      --set GH_CLIENT_ID=${{ inputs.GH_CLIENT_ID }}
      --set GH_CLIENT_SECRET=${{ inputs.GH_CLIENT_SECRET }}
      --set GH_TOKEN=${{ inputs.GH_TOKEN }}
      --set nonprod=${{ steps.overrides.outputs.nonprod }}
      --set BASE_URL=${{ steps.overrides.outputs.BASE_URL }}
      --set global.DEPLOY_ENV=${{ inputs.ENV }}
      --set global.VERSION=${{ inputs.VERSION }}
      --set global.image.tag=${{ steps.tag.outputs.sha }}
      --set POSTGRES_USER=${{ inputs.POSTGRES_USER }}
      --set POSTGRES_PASSWORD=${{ inputs.POSTGRES_PASSWORD }}
      --set AWS_BUCKET_NAME=${{ inputs.AWS_BUCKET_NAME }}
      --set global.SERVICE_ACCOUNT=${{ inputs.SERVICE_ACCOUNT }}
      --set DOCSERVER_BASE_URL=${{ inputs.DOCSERVER_BASE_URL }}
      --set MEMCACHED_USER=${{ inputs.MEMCACHED_USER }}
      --set MEMCACHED_PASSWORD=${{ inputs.MEMCACHED_PASSWORD }}
      --install
      --atomic
      --cleanup-on-fail
      --history-max 5
    shell: bash
  # Will need this if we switch back to Github App
  # - name: Add App credential secret
  #   run: |
  #     if [[ steps.upgrade.conclusion == 'success' ]]; then
  #       echo -e "$APP_CREDS_YAML" | kubectl apply -f -
  #     fi
  #   shell: bash